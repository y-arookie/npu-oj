描述

数字河中的一个数n 的后继数是n 加上其每位数字的和。例如，12345的后继数是12360，因为12345＋1＋2＋3＋4＋5＝12360。如果数字河的第一个数为k，我们就称此数字河为river k。例如，river 480 代表序列{480, 492, 507, 519, ...}，river 483 代表序列{483, 498, 519, ...}。 
当两个数字河有相同的元素时，我们称这两个数字河在此元素处相遇。例如，river 480 和river 483 在元素519处相遇。所有数字河都会和river 1, river 3 或river 9 相遇。编程计算给定的数字河最先与以上三条河流中的哪一条相遇，在何元素处相遇？ 

输入

输入文件包括多组测试用例，每个测试用例占一行，以“0”标志文件结束，该行无需处理。 
每行给定一个整数 n ，(1<=n<=16384) ,即river n。

输出

对于每个测试用例输出两行，第一行为测试用例号，第二行输出“first meets river x at y”。其中，y表示river n 最先遇到的river x中的最小元素值(x = 1,3,9)。

 

输入样例

117
52
0



 

输出样例

Case #1
first meets river 9 at 117
Case #2
first meets river 1 at 107




#include <stdio.h>
void Min(int a,int b,int c)
{
	int min;
	min=a;
	if(b<min)
	min=b;
	if(c<min)
	min=c;
	if(min==a)
	printf("first meets river 1 at %d\n",min);
	else if(min==b)
	printf("first meets river 3 at %d\n",min);
	else
	printf("first meets river 9 at %d\n",min);	
}
int Add(int num)
{
	int temp,sum;
	sum=num;
	temp=num;
	while(temp>0)
	{
		sum=sum+temp%10;
		temp=temp/10;
	}
	
	return sum;
}
int main()
{
	int n[16500]={0},i,length,j,k,a,b,c,first;
	i=0;
	while(1)                  //输入数字 ,i为输入数字的个数 
	{
		scanf("%d",&n[i]);
		if(n[i]==0)
		{
		break;
		}
		i++;	
	}
	length=i;
for(i=0;i<length;i++)
{
	printf("case #%d\n",i+1);
	j=n[0];
	for(k=1;1>0;k=Add(k))
			{
				if(k>j)
				{
					j=Add(j);
				}
				if(j==k)
				{
					a=j;
					break;
				}
			}
	j=n[0];
	for(k=3;1>0;k=Add(k))
			{
				if(k>j)
				{
					j=Add(j);
				}
				if(j==k)
				{
					b=j;
					break;
				}
			}
	j=n[0];
		for(k=9;1>0;k=Add(k))
			{
				if(k>j)
				{
					j=Add(j);
				}
				if(j==k)
				{
					c=j;
					break;
				}
			}
	Min(a,b,c);	
}	
	
	return 0;
}

输入后点回车，程序不往下进行，留作以后解决
